<!DOCTYPE html>
<html lang="zh-CN">
<head>
  <meta charset="UTF-8">
  <title>杜甫羁旅诗动态地图</title>
  <link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" />
  
  <style>
    @font-face {
      font-family: 'GuFeng';
      src: url('古风.ttf') format('truetype');
    }

    #map { height: 100vh; }
    #search-panel {
      font-family: '黑体', sans-serif;
      background-image: url('shuimo-bg.png');
      background-size: cover;
      background-position: center;
      background-repeat: no-repeat;
      background-color: white;
      border-radius: 8px;
      box-shadow: 0 0 10px rgba(0,0,0,0.3);
      padding: 15px;
      width: 250px;
    }

    .popup-content { 
      font-family: "黑体", sans-serif; 
      font-weight: bold; 
    }

    .path-line {
      stroke: rgba(255, 200, 100, 0.8);
      stroke-width: 2.5;
      fill: none;
    }

    .moving-dot {
      fill: url(#glowGradient);
      stroke: none;
    }

    .place-label {
      font-family: 'GuFeng', 'KaiTi', '楷体', 'STKaiti', serif;
      font-size: 16px;
      color: #333;
      text-shadow: 1px 1px 2px #fff;
    }

    #sidebar {
      position: absolute;
      top: 0;
      left: 0;
      width: 220px;
      height: 100vh;
      background-image: url('sidebar.png');
      background-size: cover;
      background-position: center;
      box-shadow: 0 0 10px rgba(0,0,0,0.3);
      padding: 15px;
      z-index: 1100;
      font-family: '黑体', sans-serif;
      transition: transform 0.3s ease;
    }

    #sidebar.collapsed {
      transform: translateX(-100%);
    }

    .nav-button {
        display: block;
        width: 100%;
        padding: 12px 15px; /* 增加内边距使文字更突出 */
        margin-bottom: 10px;
        font-family: '黑体', sans-serif;
        font-size: 16px;
        color: #333; /* 确保文字颜色与背景对比 */
        text-shadow: 0 0 3px rgba(255,255,255,0.8); /* 文字描边增强可读性 */
        border: none;
        border-radius: 5px;
        cursor: pointer;
        position: relative; /* 为背景图片定位做准备 */
        overflow: hidden; /* 防止背景图片溢出 */
        z-index: 1; /* 确保文字在背景之上 */
        transition: all 0.3s ease;
        opacity: 0; /* 初始透明 */
        transition: opacity 1s ease; /* 加入淡入动画 */
    }

    /* 按钮背景图片设置 */
    .nav-button::before {
        content: "";
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-size: cover;
        background-position: center;
        opacity: 0.4; /* 背景透明度 */
        z-index: -1; /* 将背景置于文字下方 */
        transition: opacity 0.3s ease;
    }

    /* 为每个按钮指定不同背景 */
    .nav-button:nth-child(2)::before { /* 第一个按钮 - 地图 */
        background-image: url('daohangbutton1.png');
    }

    .nav-button:nth-child(3)::before { /* 第二个按钮 - 数据统计 */
        background-image: url('daohangbutton2.png');
    }

    .nav-button:nth-child(4)::before { /* 第三个按钮 - 英译 */
        background-image: url('daohangbutton3.png');
    }

    /* 悬停效果增强 */
    .nav-button:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 8px rgba(0,0,0,0.2);
    }

    .nav-button:hover::before {
        opacity: 0.6; /* 悬停时背景稍微变亮 */
    }
   
    #chart-buttons {
        position: absolute;
        top: 80px;
        right: 30px;
        z-index: 2;
        display: flex;
        flex-direction: column;
        gap: 10px;
        width: 160px; /* 加宽按钮容器 */
    }

    .chart-switch-button {
        font-family: '黑体', sans-serif;
        background-color: rgba(255,255,255,0.8);
        border: 1px solid #ccc;
        border-radius: 5px;
        padding: 8px 12px; /* 增加内边距 */
        cursor: pointer;
        font-size: 14px;
        box-shadow: 0 2px 5px rgba(0,0,0,0.2);
        transition: background-color 0.3s ease;
        width: 100%; /* 使按钮填满容器宽度 */
        white-space: nowrap; /* 防止文字换行 */
        text-align: center; /* 文字居中 */
        min-width: 150px; /* 设置最小宽度 */
    }

    .chart-switch-button:hover {
      background-color: rgba(220,220,220,0.9);
    }

    .page-section {
      position: relative;
      top: 0;
      left: 0;
      width: 100%;
      height: 100vh;
    }

    #toggle-sidebar {
      position: absolute;
      top: 10px;
      left: 235px;
      width: 30px;
      height: 30px;
      background-color: #f5f5f5;
      border: none;
      border-radius: 0 15px 15px 0;
      cursor: pointer;
      z-index: 1200;
      box-shadow: 0 0 5px rgba(0,0,0,0.3);
      display: flex;
      align-items: center;
      justify-content: center;
      font-family: '黑体', sans-serif;
      transition: all 0.3s ease;
      padding-left: 5px;
      overflow: hidden;
    }

    #toggle-sidebar.collapsed {
      left: 0;
      width: 15px;
      opacity: 0.7;
    }

    #toggle-sidebar.collapsed:hover {
      opacity: 1;
    }

    #content-container {
      margin-left: 220px;
      transition: margin-left 0.3s ease;
    }

    #content-container.expanded {
      margin-left: 0;
    }
    
    #page-stats {
      position: relative;
      background-image: url('p2.png');
      background-size: cover;
      background-position: center;
      background-repeat: no-repeat;
    }
    
    #page-stats::before {
      content: "";
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background-color: rgba(255,255,255,0.7);
      z-index: 0;
    }
    
    #page-stats h3 {
      position: relative;
      z-index: 1;
      text-align: center;
      font-size: 28px;
      margin-top: 30px;
      color: #333;
      text-shadow: 1px 1px 2px rgba(255,255,255,0.8);
    }
    
    #page-stats p {
      position: relative;
      z-index: 1;
      width: 80%;
      margin: 20px auto;
      padding: 20px;
      background-color: rgba(255,255,255,0.85);
      border-radius: 8px;
      box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    }

    #chart-container {
      position: relative;
      background-color: rgba(255, 255, 255, 0.85);
      border-radius: 8px;
      padding: 20px;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
      width: 90%;
      max-width: 800px;
      margin: 20px auto;
      height: 500px;
      overflow: visible;
      background-image: url('柱形图bg.png');
      background-size: cover;
      background-position: center;
      background-repeat: no-repeat;
    }

    .bar {
      transition: all 0.3s ease;
      fill: url(#barPattern);
      transform-origin: bottom center;
    }

    .bar:hover {
      transform: scaleY(1.1);
    }

    .axis-text {
      font-family: '黑体', sans-serif;
      font-size: 14px;
    }

    .chart-title {
      font-family: '黑体', sans-serif;
      font-size: 16px;
      text-anchor: middle;
    }

    .value-label {
      font-family: '黑体', sans-serif;
      font-size: 12px;
      fill: #333;
      text-anchor: middle;
      font-weight: bold;
    }

    .x-axis text {
      text-anchor: end;
      transform: rotate(-45deg);
      font-size: 12px;
    }

    .x-axis .tick text {
      transform: rotate(-45deg) translate(-5px, -10px);
    }

    .tooltip {
      position: absolute;
      text-align: center;
      background: white;
      border: 1px solid #999;
      border-radius: 5px;
      padding: 5px;
      font-size: 14px;
      pointer-events: none;
      line-height: 1.4em;
      box-shadow: 0 0 5px rgba(0,0,0,0.3);
      font-family: '黑体', sans-serif;
    }

    .timeline-line {
        stroke: #000;
        stroke-width: 3;
        fill: none;
    }

    .timeline-area {
        fill: url(#areaGradient);
        opacity: 0.6;
    }

    .timeline-dot {
        fill: #000;
        stroke: white;
        stroke-width: 2;
        cursor: pointer;
        transition: all 0.3s ease;
    }

    .timeline-dot:hover {
        fill: #333;
        transform: scale(1.2);
    }

    .timeline-label {
        font-family: '黑体', sans-serif;
        font-size: 12px;
        fill: #333;
        text-anchor: middle;
        font-weight: bold;
    }

    #chart-container object, #chart-container iframe {
        border-radius: 8px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    }

    .freq-table {
        width: 90%;
        margin: 20px auto;
        border-collapse: collapse;
        font-family: '黑体', sans-serif;
        background-color: rgba(255, 255, 255, 0.9);
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    }

    .freq-table th, .freq-table td {
        padding: 12px 15px;
        text-align: center;
        border-bottom: 1px solid #ddd;
    }

    .freq-table th {
        background-color: #f8f8f8;
        font-weight: bold;
        position: sticky;
        top: 0;
    }

    .freq-table tr:hover {
        background-color: #f5f5f5;
    }

    .freq-table .highlight {
        background-color: #fffacd;
        font-weight: bold;
    }

    .sortable {
        cursor: pointer;
        user-select: none;
    }

    .sortable:hover {
        background-color: #f0f0f0;
    }

    .sort-icon {
        margin-left: 5px;
        font-size: 12px;
    }

    #chart-buttons {
        position: absolute;
        top: 80px;  /* 下移避开标题 */
        right: 30px;
        z-index: 2;
        display: flex;
        flex-direction: column;  /* 垂直排列 */
        gap: 10px;  /* 按钮间距 */
        width: 120px;  /* 固定宽度 */
    }

    /* 更新表格容器样式 */
    #table-container {
        max-height: 400px;  /* 限制高度 */
        overflow-y: auto;  /* 垂直滚动 */
        margin: 20px auto;
        width: 90%;
        background-color: rgba(255, 255, 255, 0.85);
        border-radius: 8px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    }

    /* 分页控制样式 */
    .pagination-controls {
        display: flex;
        justify-content: center;
        gap: 20px;
        margin-top: 15px;
    }

    .page-button {
        padding: 8px 15px;
        background-color: #f5f5f5;
        border: 1px solid #ddd;
        border-radius: 4px;
        cursor: pointer;
        font-family: '黑体', sans-serif;
    }

    .page-button:hover {
        background-color: #e0e0e0;
    }

    .page-button:disabled {
        opacity: 0.5;
        cursor: not-allowed;
    }

    .page-info {
        font-family: '黑体', sans-serif;
        line-height: 34px;
    }

  </style>
</head>

<body>
  <button id="toggle-sidebar" title="隐藏/展开导航栏">≡</button>
  
  <div id="sidebar">
    <h2>导航</h2>
    <button class="nav-button" onclick="switchPage('map')">杜甫羁旅诗地图</button>
    <button class="nav-button" onclick="switchPage('stats')">数据统计</button>
    <button class="nav-button" onclick="switchPage('translation')">杜甫羁旅诗英译</button>
  </div>
  
  <div id="content-container">
    <div id="page-map" class="page-section"> 
      <div id="map"></div> 
      <div id="search-panel" style="position: absolute; top: 20px; right: 20px; width: 250px; padding: 15px; border-radius: 8px; box-shadow: 0 0 10px rgba(0,0,0,0.3); z-index: 1000;">
        <h3 style="margin-top: 0; font-family: '黑体', sans-serif;">检索诗歌</h3>
        <input type="text" id="search-input" placeholder="输入诗歌标题..." style="width: 100%; padding: 8px; margin-bottom: 10px; box-sizing: border-box; font-family: '黑体', sans-serif;">
        <div id="search-result" style="font-family: '黑体', sans-serif; font-size: 14px;"></div>
      </div>
    </div>

    <div id="page-stats" class="page-section" style="display: none;">
      <h3 style="font-family: '黑体', sans-serif; text-align: center; margin-top: 20px;">
        杜甫羁旅诗相关统计数据
      </h3>
      <div id="chart-buttons" style="position: absolute; top: 20px; right: 30px; z-index: 2;">
        <button class="chart-switch-button" onclick="switchChart('region')">地区分布柱形图</button>
        <button class="chart-switch-button" onclick="switchChart('timeline')">时间分布折线图</button>
        <button class="chart-switch-button" onclick="switchChart('concept')">羁旅概念网络</button>
        <button class="chart-switch-button" onclick="switchChart('wordfreq')">高频词统计</button>
      </div>
      <div id="chart-container"></div>
    </div>

    <div id="page-translation" class="page-section" style="display: none;">
      <h3 style="font-family: '黑体', sans-serif; margin-left: 20px;">杜甫羁旅诗英译</h3>
      <p style="margin-left: 20px;">这里将来可以展示翻译版诗歌，比如英文译文。</p>
    </div>
  </div>

  <script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>
  <script src="https://d3js.org/d3.v7.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/PapaParse/5.3.2/papaparse.min.js"></script>

  <script>
    var map = L.map('map', {
      maxBounds: [
        [15, 70],
        [55, 140]
      ],
      maxBoundsViscosity: 1.0,
      minZoom: 4,
      maxZoom: 10
    }).setView([30.5, 105], 4.5);

    L.tileLayer('https://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}{r}.png', {
      attribution: '&copy; CartoDB'
    }).addTo(map);

    var svgLayer = L.svg().addTo(map);
    var svg = d3.select("#map").select("svg");
    var g = svg.append("g").attr("class", "leaflet-zoom-hide");

    var defs = svg.append("defs");
    var gradient = defs.append("radialGradient")
      .attr("id", "glowGradient");
    gradient.append("stop")
      .attr("offset", "0%")
      .attr("stop-color", "yellow")
      .attr("stop-opacity", 1);
    gradient.append("stop")
      .attr("offset", "100%")
      .attr("stop-color", "gold")
      .attr("stop-opacity", 0);

    var path, dot, totalLength;
    var locationArray = [];
    var duration = 20000;

    document.getElementById('toggle-sidebar').addEventListener('click', function() {
      var sidebar = document.getElementById('sidebar');
      var content = document.getElementById('content-container');
      var toggleBtn = document.getElementById('toggle-sidebar');
      
      sidebar.classList.toggle('collapsed');
      content.classList.toggle('expanded');
      toggleBtn.classList.toggle('collapsed');
    });

    Papa.parse('地域v5.csv', {
      download: true,
      header: true,
      complete: function(results) {
        let data = results.data.filter(d => d.latitude && d.longitude);

        let locations = {};
        data.forEach(d => {
          let key = d.latitude + ',' + d.longitude;
          if (!locations[key]) {
            locations[key] = {
              lat: +d.latitude,
              lng: +d.longitude,
              poems: [],
              name: d.location || "",
              minTime: d.created_time
            };
          }
          locations[key].poems.push(d.title);
        });

        locationArray = Object.values(locations).sort((a, b) => {
          return new Date(a.minTime) - new Date(b.minTime);
        });

        var guofengIcon = L.icon({
          iconUrl: 'guofeng-marker.png',
          iconSize: [40, 40],
          iconAnchor: [20, 40],
          popupAnchor: [0, -40]
        });

        locationArray.forEach(loc => {
          var marker = L.marker([loc.lat, loc.lng], { icon: guofengIcon }).addTo(map);
          marker.bindPopup("<div class='popup-content'>" + loc.poems.join("<br>") + "</div>");

          if (loc.name) {
            var label = L.marker([loc.lat, loc.lng], {
              icon: L.divIcon({
                className: 'place-label',
                html: loc.name,
                iconSize: [100, 20],
                iconAnchor: [-10, 10]
              })
            }).addTo(map);
          }
        });

        initPath();
        animateDot();
      }
    });

    function initPath() {
      if (path) path.remove();
      if (dot) dot.remove();

      var pathGenerator = d3.line()
        .curve(d3.curveCatmullRom.alpha(0.5))
        .x(d => map.latLngToLayerPoint([d.lat, d.lng]).x)
        .y(d => map.latLngToLayerPoint([d.lat, d.lng]).y);

      path = g.append("path")
        .datum(locationArray)
        .attr("class", "path-line")
        .attr("d", pathGenerator);

      totalLength = path.node().getTotalLength();

      dot = g.append("circle")
        .attr("r", 8)
        .attr("class", "moving-dot");
    }

    function animateDot() {
      if (!path || !dot) return;

      dot.transition()
        .duration(duration)
        .ease(d3.easeLinear)
        .attrTween("transform", function() {
          return function(t) {
            var p = path.node().getPointAtLength(t * totalLength);
            return "translate(" + p.x + "," + p.y + ")";
          };
        })
        .on("end", function() {
          animateDot();
        });
    }

    map.on("zoomend moveend", function() {
      if (dot) dot.interrupt();
      initPath();
      animateDot();
    });

    document.getElementById('search-input').addEventListener('input', function(e) {
      var keyword = e.target.value.trim();
      var resultDiv = document.getElementById('search-result');
      
      if (!keyword) {
        resultDiv.innerHTML = '';
        return;
      }

      var matches = [];
      locationArray.forEach(loc => {
        loc.poems.forEach(title => {
          if (title.includes(keyword)) {
            let year = '';
            if (loc.minTime) {
              year = new Date(loc.minTime).getFullYear();
            }
            matches.push({
              title: title,
              location: loc.name || '未知地点',
              year: year || '未知年份'
            });
          }
        });
      });

      if (matches.length === 0) {
        resultDiv.innerHTML = '未找到相关诗歌';
      } else {
        resultDiv.innerHTML = matches.map(m => `
          <div style="margin-bottom: 8px;">
            <strong>${m.title}</strong><br>
            地点：${m.location}<br>
            年份：${m.year}
          </div>
        `).join('');
      }
    });

    function switchPage(page) {
      document.getElementById('page-map').style.display = (page === 'map') ? 'block' : 'none';
      document.getElementById('page-stats').style.display = (page === 'stats') ? 'block' : 'none';
      document.getElementById('page-translation').style.display = (page === 'translation') ? 'block' : 'none';
      
      document.getElementById('search-panel').style.display = (page === 'map') ? 'block' : 'none';
      
      if (page === 'stats') {
        setTimeout(loadChartData, 100);
      }
    }

    function switchChart(type) {
      d3.select("#chart-container").selectAll("*").remove(); // 清空原图表

      if (type === 'region') {
        loadChartData(); // 加载原来的地区柱形图
      } else if (type === 'timeline') {
        loadTimelineChart(); // 加载时间分布折线图（占位）
      } else if (type === 'concept') {
        loadConceptNetwork(); // 加载概念映射网络（占位）
      } else if (type === 'wordfreq') {
        loadWordFrequency(); // 加载高频词统计
      }
    }

    // 时间折线图
    function loadTimelineChart() {
      Papa.parse('地域v5.csv', {
        download: true,
        header: true,
        complete: function(results) {
          const rawData = results.data.filter(d => d.created_time);

          // 统计每个年份出现的数量
          const yearCounts = {};
          rawData.forEach(d => {
            const year = new Date(d.created_time).getFullYear();
            if (!isNaN(year)) {
              yearCounts[year] = (yearCounts[year] || 0) + 1;
            }
          });

          // 将年份统计整理成数组，并按年份升序排序
          const data = Object.keys(yearCounts)
            .map(year => ({ year: +year, count: yearCounts[year] }))
            .sort((a, b) => a.year - b.year);

          createTimelineChart(data);
        }
      });
    }

    // 概念映射网络
    function loadConceptNetwork() {
      d3.select("#chart-container")
        .append("div")
        .style("text-align", "center")
        .style("margin-top", "200px")
        .style("font-family", "'黑体', sans-serif")
        .style("font-size", "20px")
        .style("color", "#555")
        .text("（杜甫羁旅诗概念映射网络 敬请期待）");
    }

    function loadChartData() {
      Papa.parse('数量统计.csv', {
        download: true,
        header: true,
        complete: function(results) {
          const data = results.data.filter(d => d.region && d.count).map(d => ({
            region: d.region,
            count: +d.count
          }));
          createBarChart(data);
        }
      });
    }

    function createBarChart(data) {
      d3.select("#chart-container").selectAll("*").remove();
      
      const container = document.getElementById('chart-container');
      const width = container.clientWidth;
      const height = container.clientHeight;
      const margin = {top: 40, right: 30, bottom: 100, left: 60};
      const innerWidth = width - margin.left - margin.right;
      const innerHeight = height - margin.top - margin.bottom;
      
      const svg = d3.select("#chart-container")
        .append("svg")
        .attr("width", width)
        .attr("height", height);

      const g = svg.append("g")
        .attr("transform", `translate(${margin.left},${margin.top})`);

      svg.append('defs')
        .append('pattern')
        .attr('id', 'barPattern')
        .attr('patternUnits', 'userSpaceOnUse')
        .attr('width', 20)
        .attr('height', 20)
        .append('image')
        .attr('href', '柱形图.png')
        .attr('preserveAspectRatio', 'none')
        .attr('width', 20)
        .attr('height', 20);

      const x = d3.scaleBand()
        .domain(data.map(d => d.region))
        .range([0, innerWidth])
        .padding(0.2);
      
      const y = d3.scaleLinear()
        .domain([0, d3.max(data, d => d.count) * 1.1])
        .range([innerHeight, 0])
        .nice();
      
      const tooltip = d3.select("body").append("div")
        .attr("class", "tooltip")
        .style("opacity", 0);
      
      g.selectAll(".bar")
        .data(data)
        .enter()
        .append("rect")
        .attr("class", "bar")
        .attr("x", d => x(d.region))
        .attr("y", d => y(d.count))
        .attr("width", x.bandwidth())
        .attr("height", d => innerHeight - y(d.count))
        .attr("fill", "url(#barPattern)")
        .on("mouseover", function(event, d) {
          d3.select(this)
            .transition()
            .duration(200)
            .attr("opacity", 0.8);
          
          tooltip.transition()
            .duration(200)
            .style("opacity", .9);
          tooltip.html(`${d.region}<br>诗歌数量: ${d.count}`)
            .style("left", (event.pageX + 10) + "px")
            .style("top", (event.pageY - 28) + "px");
        })
        .on("mouseout", function() {
          d3.select(this)
            .transition()
            .duration(200)
            .attr("opacity", 1);
          
          tooltip.transition()
            .duration(500)
            .style("opacity", 0);
        });
      
      g.selectAll(".value-label")
        .data(data)
        .enter()
        .append("text")
        .attr("class", "value-label")
        .attr("x", d => x(d.region) + x.bandwidth() / 2)
        .attr("y", d => y(d.count) - 10)
        .attr("dy", "0.75em")
        .text(d => d.count);
      
      g.append("g")
        .attr("class", "axis axis-x")
        .attr("transform", `translate(0,${innerHeight})`)
        .call(d3.axisBottom(x))
        .selectAll("text")
        .attr("class", "axis-text")
        .attr("dy", "1em")
        .attr("transform", "rotate(-45)")
        .style("text-anchor", "end");
      
      g.append("g")
        .attr("class", "axis axis-y")
        .call(d3.axisLeft(y).ticks(5))
        .selectAll("text")
        .attr("class", "axis-text");

      g.selectAll(".domain")
       .attr("stroke", "#666")
       .attr("stroke-width", 3);

      g.selectAll(".tick line")
       .attr("stroke", "#bbb")         // 浅灰色
       .attr("stroke-dasharray", "2,2") // 虚线
       .attr("stroke-width", 2);
      
      g.append("text")
        .attr("class", "axis-text")
        .attr("transform", "rotate(-90)")
        .attr("y", -margin.left + 15)
        .attr("x", -innerHeight / 2)
        .attr("text-anchor", "middle")
        .text("诗歌数量");
      
      g.append("text")
        .attr("class", "chart-title")
        .attr("x", innerWidth / 2)
        .attr("y", -10)
        .text("杜甫羁旅诗地区分布统计图");
    }

    function createTimelineChart(data) {
        d3.select("#chart-container").selectAll("*").remove();

        const container = document.getElementById('chart-container');
        const width = container.clientWidth;
        const height = container.clientHeight;
        const margin = {top: 40, right: 30, bottom: 100, left: 60};
        const innerWidth = width - margin.left - margin.right;
        const innerHeight = height - margin.top - margin.bottom;

        const svg = d3.select("#chart-container")
            .append("svg")
            .attr("width", width)
            .attr("height", height);

        // 添加淡灰色填充渐变
        const defs = svg.append("defs");
        defs.append("linearGradient")
            .attr("id", "areaGradient")
            .attr("x1", "0%")
            .attr("y1", "0%")
            .attr("x2", "0%")
            .attr("y2", "100%")
            .selectAll("stop")
            .data([
                {offset: "0%", color: "#f0f0f0", opacity: 0.6},
                {offset: "100%", color: "#f0f0f0", opacity: 0.2}
            ])
            .enter()
            .append("stop")
            .attr("offset", d => d.offset)
            .attr("stop-color", d => d.color)
            .attr("stop-opacity", d => d.opacity);

        const g = svg.append("g")
            .attr("transform", `translate(${margin.left},${margin.top})`);

        const x = d3.scaleLinear()
            .domain(d3.extent(data, d => d.year))
            .range([0, innerWidth]);

        const y = d3.scaleLinear()
            .domain([0, d3.max(data, d => d.count) * 1.1])
            .range([innerHeight, 0])
            .nice();

        const line = d3.line()
            .x(d => x(d.year))
            .y(d => y(d.count))
            .curve(d3.curveMonotoneX);

        // 创建区域图
        const area = d3.area()
            .x(d => x(d.year))
            .y0(innerHeight)
            .y1(d => y(d.count))
            .curve(d3.curveMonotoneX);

        // 添加淡灰色填充区域
        g.append("path")
            .datum(data)
            .attr("class", "timeline-area")
            .attr("d", area);

        // 添加黑色折线（初始隐藏）
        const path = g.append("path")
            .datum(data)
            .attr("class", "timeline-line")
            .attr("d", line)
            .attr("stroke", "#000")
            .attr("stroke-width", 3)
            .attr("fill", "none")
            .attr("stroke-dasharray", function() {
                // 计算路径总长度用于动画
                return this.getTotalLength();
            })
            .attr("stroke-dashoffset", function() {
                return this.getTotalLength();
            });

        // 执行折线动画
        path.transition()
            .duration(2000)
            .ease(d3.easeLinear)
            .attr("stroke-dashoffset", 0);

        // 创建工具提示
        const tooltip = d3.select("body").append("div")
            .attr("class", "tooltip")
            .style("opacity", 0);

        // 添加数据点
        g.selectAll(".dot-group")
            .data(data)
            .enter()
            .append("g")
            .attr("class", "dot-group")
            .attr("transform", d => `translate(${x(d.year)},${y(d.count)})`)
            .on("mouseover", function(event, d) {
                d3.select(this).select("circle")
                    .attr("r", 8)
                    .attr("fill", "#333");

                tooltip.transition()
                    .duration(200)
                    .style("opacity", .9);
                tooltip.html(`年份: ${d.year}<br>诗歌数量: ${d.count}`)
                    .style("left", (event.pageX + 10) + "px")
                    .style("top", (event.pageY - 28) + "px");
            })
            .on("mouseout", function() {
                d3.select(this).select("circle")
                    .attr("r", 5)
                    .attr("fill", "#000");

                tooltip.transition()
                    .duration(500)
                    .style("opacity", 0);
            })
            .append("circle")
            .attr("class", "timeline-dot")
            .attr("r", 5)
            .attr("fill", "#000");

        // 添加数值标签
        g.selectAll(".timeline-label")
            .data(data)
            .enter()
            .append("text")
            .attr("class", "timeline-label")
            .attr("x", d => x(d.year))
            .attr("y", d => y(d.count) - 15)
            .attr("dy", "0.35em")
            .text(d => d.count);

        // 添加坐标轴
        g.append("g")
            .attr("transform", `translate(0,${innerHeight})`)
            .call(d3.axisBottom(x).tickFormat(d3.format("d")))
            .selectAll("text")
            .attr("class", "axis-text")
            .attr("transform", "rotate(-45)")
            .style("text-anchor", "end");

        g.append("g")
            .call(d3.axisLeft(y).ticks(5))
            .selectAll("text")
            .attr("class", "axis-text");

        // 美化坐标轴
        g.selectAll(".domain")
            .attr("stroke", "#666")
            .attr("stroke-width", 2);

        g.selectAll(".tick line")
            .attr("stroke", "#ddd")
            .attr("stroke-width", 1);

        // 添加轴标题
        g.append("text")
            .attr("class", "axis-text")
            .attr("transform", "rotate(-90)")
            .attr("y", -margin.left + 15)
            .attr("x", -innerHeight / 2)
            .attr("text-anchor", "middle")
            .text("诗歌数量");

        // 添加图表标题
        g.append("text")
            .attr("class", "chart-title")
            .attr("x", innerWidth / 2)
            .attr("y", -10)
            .text("杜甫羁旅诗时间分布折线图");
    }

    function loadConceptNetwork() {
        d3.select("#chart-container").selectAll("*").remove();
        
        const container = document.getElementById('chart-container');
        const width = container.clientWidth;
        const height = container.clientHeight;
        
        // 创建一个div容器来放置SVG内容
        const containerDiv = d3.select("#chart-container")
            .append("div")
            .attr("id", "concept-network-container")
            .style("width", "100%")
            .style("height", "100%")
            .style("overflow", "auto");
        
        // 使用fetch加载SVG文件内容
        fetch('concept-network.svg')
            .then(response => response.text())
            .then(svgText => {
                // 将SVG内容插入到容器中
                containerDiv.html(svgText);
                
                // 获取SVG元素
                const svgElement = containerDiv.select("svg")
                    .attr("width", "100%")
                    .attr("height", "100%")
                    .style("background-color", "rgba(255,255,255,0.85)");
                
                // 确保SVG中的脚本能够执行
                const scripts = svgElement.selectAll("script");
                scripts.each(function() {
                    const script = document.createElement('script');
                    script.textContent = this.textContent;
                    document.body.appendChild(script).parentNode.removeChild(script);
                });
                
                // 添加额外的交互功能（可选）
                addExtraInteractivity();
            })
            .catch(error => {
                console.error("Error loading concept network:", error);
                containerDiv.html("<p>无法加载概念网络图表</p>");
            });
    }

    // 可选：添加额外的交互功能
    function addExtraInteractivity() {
        // 示例：为所有节点添加悬停效果
        d3.selectAll(".node")
            .on("mouseover", function() {
                d3.select(this).style("opacity", 0.8);
                // 可以在这里添加工具提示或其他交互效果
            })
            .on("mouseout", function() {
                d3.select(this).style("opacity", 1);
            });
        
        // 示例：为链接添加点击事件
        d3.selectAll(".link")
            .on("click", function() {
                console.log("链接被点击");
                // 添加你的点击处理逻辑
            });
    }

    let currentPage = 1;
    const rowsPerPage = 10;  // 每页显示10行
    let wordFrequencyData = [];

    // 高频词统计函数
    function loadWordFrequency() {
        Papa.parse('高频词.csv', {
            download: true,
            header: true,
            complete: function(results) {
                wordFrequencyData = results.data
                    .filter(d => d.Rank && d.Character && d.Freq)
                    .slice(0, 20);  // 只取前20个
                
                currentPage = 1;  // 重置为第一页
                renderWordFrequencyTable();
            },
            error: function(error) {
                console.error("加载高频词数据出错:", error);
                d3.select("#chart-container")
                    .append("div")
                    .style("text-align", "center")
                    .style("margin-top", "100px")
                    .style("font-family", "'黑体', sans-serif")
                    .style("font-size", "18px")
                    .text("无法加载高频词数据");
            }
        });
    }

    // 渲染高频词表格（带分页）
    function renderWordFrequencyTable() {
        d3.select("#chart-container").selectAll("*").remove();
        
        // 添加标题
        d3.select("#chart-container")
            .append("h3")
            .style("text-align", "center")
            .style("font-family", "'黑体', sans-serif")
            .style("margin-top", "20px")
            .text("杜甫羁旅诗高频词统计");
        
        // 创建表格容器
        const tableContainer = d3.select("#chart-container")
            .append("div")
            .attr("id", "table-container");
        
        // 计算分页数据
        const startIdx = (currentPage - 1) * rowsPerPage;
        const endIdx = startIdx + rowsPerPage;
        const pageData = wordFrequencyData.slice(startIdx, endIdx);
        
        // 创建表格
        const table = tableContainer.append("table")
            .attr("class", "freq-table");
        
        // 添加表头
        const thead = table.append("thead");
        const headerRow = thead.append("tr");
        
        headerRow.append("th")
            .attr("class", "sortable")
            .text("排名")
            .on("click", () => {
                wordFrequencyData.sort((a, b) => a.Rank - b.Rank);
                currentPage = 1;
                renderWordFrequencyTable();
            });
        
        headerRow.append("th")
            .attr("class", "sortable")
            .text("汉字")
            .on("click", () => {
                wordFrequencyData.sort((a, b) => a.Character.localeCompare(b.Character));
                currentPage = 1;
                renderWordFrequencyTable();
            });
        
        headerRow.append("th")
            .attr("class", "sortable")
            .text("出现频率")
            .on("click", () => {
                wordFrequencyData.sort((a, b) => b.Freq - a.Freq);
                currentPage = 1;
                renderWordFrequencyTable();
            });
        
        // 添加表体
        const tbody = table.append("tbody");
        
        // 添加行
        const rows = tbody.selectAll("tr")
            .data(pageData)
            .enter()
            .append("tr");
        
        rows.append("td")
            .text(d => d.Rank);
        
        rows.append("td")
            .text(d => d.Character)
            .style("font-size", "18px");
        
        rows.append("td")
            .text(d => d.Freq);
        
        // 添加行交互效果
        rows.on("mouseover", function() {
                d3.select(this).classed("highlight", true);
            })
            .on("mouseout", function() {
                d3.select(this).classed("highlight", false);
            })
            .on("click", function(event, d) {
                alert(`选中词语: ${d.Character}\n排名: ${d.Rank}\n出现频率: ${d.Freq}`);
            });
        
        // 添加分页控制
        const totalPages = Math.ceil(wordFrequencyData.length / rowsPerPage);
        
        const paginationDiv = d3.select("#chart-container")
            .append("div")
            .attr("class", "pagination-controls");
        
        // 上一页按钮
        paginationDiv.append("button")
            .attr("class", "page-button")
            .text("上一页")
            .property("disabled", currentPage === 1)
            .on("click", () => {
                if (currentPage > 1) {
                    currentPage--;
                    renderWordFrequencyTable();
                }
            });
        
        // 页码信息
        paginationDiv.append("span")
            .attr("class", "page-info")
            .text(`第 ${currentPage} 页 / 共 ${totalPages} 页`);
        
        // 下一页按钮
        paginationDiv.append("button")
            .attr("class", "page-button")
            .text("下一页")
            .property("disabled", currentPage === totalPages)
            .on("click", () => {
                if (currentPage < totalPages) {
                    currentPage++;
                    renderWordFrequencyTable();
                }
            });
    }

    window.addEventListener('load', function() {
      const buttons = document.querySelectorAll('.nav-button');
      buttons.forEach((btn, index) => {
        setTimeout(() => {
          btn.style.opacity = 1;
        }, index * 500); // 每个按钮延迟500ms依次淡入
      });
  });

  </script>
</body>
</html>